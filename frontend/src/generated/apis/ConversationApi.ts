// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * dating_app_01 API
 * dating_app_01 API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Conversation,
  ConversationRequest,
  Message,
} from '../models/index';
import {
    ConversationFromJSON,
    ConversationToJSON,
    ConversationRequestFromJSON,
    ConversationRequestToJSON,
    MessageFromJSON,
    MessageToJSON,
} from '../models/index';

export interface AddMessageToConversationRequest {
    conversationId: string;
    message: Message;
}

export interface CreateNewConversationRequest {
    conversationRequest: ConversationRequest;
}

export interface GetConversationRequest {
    conversationId: string;
}

/**
 * 
 */
export class ConversationApi extends runtime.BaseAPI {

    /**
     * POST api/conversations/{conversationId}
     */
    async addMessageToConversationRaw(requestParameters: AddMessageToConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling addMessageToConversation().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling addMessageToConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/conversations/{conversationId}`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageToJSON(requestParameters['message']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * POST api/conversations/{conversationId}
     */
    async addMessageToConversation(requestParameters: AddMessageToConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.addMessageToConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/conversations
     */
    async createNewConversationRaw(requestParameters: CreateNewConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationRequest',
                'Required parameter "conversationRequest" was null or undefined when calling createNewConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationRequestToJSON(requestParameters['conversationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * POST api/conversations
     */
    async createNewConversation(requestParameters: CreateNewConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.createNewConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/conversations/{conversationId}
     */
    async getConversationRaw(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling getConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/conversations/{conversationId}`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * GET api/conversations/{conversationId}
     */
    async getConversation(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.getConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
